import { lazy, Suspense, useEffect, useState } from "react";

import Head from "next/head";
import dynamic from "next/dynamic";

import { Loading } from "../components/loading";

import { importRemote } from "@module-federation/utilities";

export default function Home() {
  const customComponentFromDatabase = "remote/Counter"
  // @ts-ignore
  // The following does not work as the internal state is lost after re-rendering of Home
  // const Counter = dynamic(() => import('remote/Counter'))

  // @ts-ignore
  // The following DOES work, but the suspense component goes to "fallback" in each re-rendering of Home
  // let counter = 'Counter';
  // const Counter = lazy(() => import('remote/' + counter))

  // @ts-ignore
  // const Counter = lazy(
  //   () =>
  //     importRemote({
  //       url: "https://module-federation-example-rho.vercel.app",
  //       scope: "remote",
  //       module: "Counter",
  //     })
  // );

  const [value, setValue] = useState(false);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>NEXT-JS HOST</div>
      <section>
        <header>This is the suspense:</header>
        <Suspense fallback={null}>
          {/* @ts-ignore */}
          <Counter startCount={10} />
        </Suspense>
      </section>
      <br />
      <section>
        <header>This is a diferent component changing current state</header>
        <button onClick={() => setValue((v) => !v)}>
          Toggle {value ? "on" : "off"}
        </button>
      </section>
      <br />
      <section>
        <header>Changing state inside other component</header>
        <Loading />
      </section>
    </div>
  );
}
