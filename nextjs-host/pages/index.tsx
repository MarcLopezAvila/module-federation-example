import {lazy, Suspense, useEffect, useState} from 'react'

import Head from 'next/head'
import dynamic from 'next/dynamic'

const Loading = () => {
  const [value, setValue] = useState(0)
  useEffect(() => {
    const upTick = () => setValue(v => (v + 1) % 10)
    const interval = setInterval(upTick, 100);
    return () => clearInterval(interval);
  }, [])
  return <progress max={10} value={value}/>
}


export default function Home() {
  // The following does not work as the internal state is lost after re-rendering of Home
  // const Counter = dynamic(() => import('remote/Counter'))

  // @ts-ignore
  // The following DOES work, but the suspense component goes to "fallback" in each re-rendering of Home
  const Counter = lazy(() => import('remote/Counter'))


  const [value, setValue] = useState(false)

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div>NEXT-JS HOST</div>
      <section>
        <header>This is the suspense:</header>
        <Suspense fallback={null}>
          <Counter startCount={10}/>
        </Suspense>
      </section>
      <br/>
      <section>
        <header>This is a diferent component changing current state</header>
        <button onClick={() => setValue(v => !v)}>Toggle {value ? "on" : "off"}</button>
      </section>
      <br/>
      <section>
        <header>Changing state inside other component</header>
        <Loading/>
      </section>
    </div>

  )
}
